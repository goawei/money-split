{"version":3,"sources":["components/DragableBodyRow.tsx","components/DraggableTable.tsx","components/DataContainer.tsx","App.tsx","serviceWorker.ts","reducers/index.tsx","index.tsx"],"names":["dragingIndex","BodyRow","_this$props","this","props","isOver","connectDragSource","connectDropTarget","restProps","moveRow","Object","objectWithoutProperties","style","objectSpread","cursor","className","index","react_default","a","createElement","assign","React","Component","rowSource","beginDrag","DragableBodyRow","DropTarget","drop","monitor","dragIndex","getItem","hoverIndex","connect","dropTarget","DragSource","dragSource","RadioGroup","Radio","Group","radioStyle","display","height","lineHeight","DraggableTable","state","isEdit","toggleEdit","_this","setState","components","body","row","data","handleAddRow","title","handleUpdateData","handleDeleteRow","columns","dataIndex","key","width","render","val","input","onChange","e","id","currentTarget","value","input_number","target","es_radio","es_button","type","onClick","icon","card","extra","marginRight","table","size","bordered","rowKey","dataSource","onRow","record","pagination","DragDropContext","HTML5Backend","color","concat","DataContainer","data1","data2","exchangeRate","name1","name2","isWideView","moveRow1","dragRow","update","$splice","moveRow2","handleAddRow1","map","reduce","b","item","amount","currency","handleAddRow2","handleDeleteRow1","filter","handleDeleteRow2","getCalculationData","_this$state","person1","name","HKD","THB","total","owe","person2","forEach","spending","Math","round","each","tableData","handleUpdateData1","dataType","newData","defineProperty","handleUpdateData2","updateExchangeRate","handleUpdateName1","handleUpdateName2","handleSaveData","_this$state2","moneySplit","localStorage","setItem","JSON","stringify","toggleView","parse","_this$state3","calculationData","console","log","Fragment","marginLeft","es_row","gutter","col","md","marginTop","components_DraggableTable","span","placeholder","App","components_DataContainer","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15d238b1.chunk.js","sourcesContent":["import React from 'react';\r\n// import { Table, Button } from 'antd';\r\n// import { DragDropContext, DragSource, DropTarget } from 'react-dnd';\r\nimport { DragSource, DropTarget } from 'react-dnd';\r\n// import HTML5Backend from 'react-dnd-html5-backend';\r\n// import update from 'immutability-helper';\r\n\r\nlet dragingIndex = -1;\r\n\r\nclass BodyRow extends React.Component {\r\n    render() {\r\n        const {\r\n            isOver,\r\n            connectDragSource,\r\n            connectDropTarget,\r\n            moveRow,\r\n            ...restProps\r\n        }: any = this.props;\r\n        const style = { ...restProps.style, cursor: 'move' };\r\n\r\n        let className = restProps.className;\r\n        if (isOver) {\r\n            if (restProps.index > dragingIndex) {\r\n                className += ' drop-over-downward';\r\n            }\r\n            if (restProps.index < dragingIndex) {\r\n                className += ' drop-over-upward';\r\n            }\r\n        }\r\n\r\n        return connectDragSource(\r\n            connectDropTarget(\r\n                <tr\r\n                {...restProps}\r\n                className={className}\r\n                style={style}\r\n                />\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\nconst rowSource = {\r\n    beginDrag(props: any) {\r\n        dragingIndex = props.index;\r\n        return {\r\n            index: props.index,\r\n        };\r\n    },\r\n};\r\n\r\nconst rowTarget = {\r\n    drop(props: any, monitor: any) {\r\n        const dragIndex = monitor.getItem().index;\r\n        const hoverIndex = props.index;\r\n\r\n        // Don't replace items with themselves\r\n        if (dragIndex === hoverIndex) {\r\n            return;\r\n        }\r\n\r\n        // Time to actually perform the action\r\n        props.moveRow(dragIndex, hoverIndex);\r\n\r\n        // Note: we're mutating the monitor item here!\r\n        // Generally it's better to avoid mutations,\r\n        // but it's good here for the sake of performance\r\n        // to avoid expensive index searches.\r\n        monitor.getItem().index = hoverIndex;\r\n    },\r\n};\r\n\r\nconst DragableBodyRow = DropTarget(\r\n    'row',\r\n    rowTarget,\r\n    (connect, monitor) => ({\r\n        connectDropTarget: connect.dropTarget(),\r\n        isOver: monitor.isOver(),\r\n    }),\r\n)(\r\n  DragSource(\r\n        'row',\r\n        rowSource,\r\n        (connect) => ({\r\n            connectDragSource: connect.dragSource(),\r\n        }),\r\n    )(BodyRow),\r\n);\r\n\r\nexport default DragableBodyRow;","import React from 'react';\r\nimport { Table, Button, Card, Input, InputNumber, Radio, Icon } from 'antd';\r\nimport { DragDropContext } from 'react-dnd';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\nimport DragableBodyRow from './DragableBodyRow';\r\n// import update from 'immutability-helper';\r\nconst RadioGroup = Radio.Group;\r\n\r\n\r\nconst radioStyle = {\r\n    display: 'block',\r\n    height: '30px',\r\n    lineHeight: '30px',\r\n};\r\n\r\ninterface IDraggableTableProps {\r\n    // columns: any[];\r\n    data: any[];\r\n    moveRow: any;\r\n    handleAddRow: any;\r\n    title: string;\r\n    handleUpdateData: any;\r\n    handleDeleteRow: any;\r\n}\r\n\r\ninterface IDraggableTableState  {\r\n    // data: any[];\r\n    isEdit: boolean;\r\n};\r\n\r\nclass DraggableTable extends React.Component<IDraggableTableProps, IDraggableTableState> {\r\n    state = {\r\n        isEdit: false,\r\n    };\r\n    toggleEdit = () => {\r\n        this.setState({ isEdit: !this.state.isEdit });\r\n    }\r\n    components = {\r\n        body: {\r\n          row: DragableBodyRow,\r\n        },\r\n    }\r\n    render() {\r\n        const { isEdit } = this.state;\r\n        const { data, moveRow, handleAddRow, title, handleUpdateData, handleDeleteRow } = this.props;\r\n        const columns: any = [\r\n            {\r\n                title: 'Item',\r\n                dataIndex: 'item',\r\n                key: 'item',\r\n                width: '30%',\r\n                render: (val: any, row: any) => isEdit ? <Input onChange={(e: any) => { handleUpdateData(row.id, \"item\", e.currentTarget.value) }} value={val} /> : val\r\n            }, {\r\n                title: 'Amount',\r\n                dataIndex: 'amount',\r\n                key: 'amount',\r\n                width: '25%',\r\n                render: (val: any, row: any) => isEdit ? <InputNumber onChange={(e: any) => { handleUpdateData(row.id, \"amount\", e) }} value={val} />: val\r\n            }, {\r\n                title: 'Currency',\r\n                dataIndex: 'currency',\r\n                key: 'currency',\r\n                width: '25%',\r\n                render: (val: any, row: any) => isEdit ? (\r\n                    <RadioGroup onChange={(e: any) => { handleUpdateData(row.id, \"currency\", e.target.value) }} value={val}>\r\n                        <Radio style={radioStyle} value=\"HKD\">HKD</Radio>\r\n                        <Radio style={radioStyle} value=\"THB\">THB</Radio>\r\n                    </RadioGroup>\r\n                ) : val\r\n            }, {\r\n                title: 'Delete',\r\n                dataIndex: 'delete',\r\n                key: 'delete',\r\n                width: '20%',\r\n                render: (val: any, row: any) => <Button type=\"danger\" onClick={() => { handleDeleteRow(row.id) }}><Icon type=\"delete\" /></Button>\r\n            }\r\n        ];\r\n        return (\r\n            <Card\r\n                title={title}\r\n                extra={\r\n                    <div>\r\n                        <Button style={{ marginRight: '12px' }} onClick={this.toggleEdit}>{isEdit ? \"Save\" : \"Edit\"}</Button>\r\n                        <Button type=\"primary\" onClick={handleAddRow}>New Row</Button>\r\n                    </div>\r\n                }\r\n            >\r\n                <Table\r\n                    size=\"small\"\r\n                    bordered={true}\r\n                    rowKey=\"id\"\r\n                    columns={columns}\r\n                    dataSource={data}\r\n                    components={this.components}\r\n                    onRow={(record, index) => ({\r\n                        index,\r\n                        moveRow: moveRow,\r\n                    })}\r\n                    pagination={false}\r\n                />\r\n                {/* <Input /> */}\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\n// export default DataContainer;\r\nexport default DragDropContext(HTML5Backend)(DraggableTable);","import React from 'react';\r\nimport { Row, Col, Card, Table, Input, InputNumber, Button } from 'antd';\r\nimport { DragDropContext } from 'react-dnd';\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\nimport update from 'immutability-helper';\r\nimport DraggableTable from './DraggableTable';\r\n\r\nconst columns: any = [\r\n    {\r\n        title: 'Person',\r\n        dataIndex: 'name',\r\n        key: 'name',\r\n    }, {\r\n        title: 'HKD',\r\n        dataIndex: 'HKD',\r\n        key: 'HKD',\r\n    }, {\r\n        title: 'Baht',\r\n        dataIndex: 'THB',\r\n        key: 'THB',\r\n    }, {\r\n        title: 'HKD Total',\r\n        dataIndex: 'total',\r\n        key: 'total',\r\n    }, {\r\n        title: 'Owe',\r\n        dataIndex: 'owe',\r\n        key: 'owe',\r\n        render: (val: any) => <span style={{ color: val > 0 ? \"red\" : \"black\" }}>{`${val}HKD`}</span>\r\n    }\r\n];\r\n\r\nconst defaultData: dataProps[] = [{\r\n    id: 0,\r\n    item: 'Flight',\r\n    amount: 1432,\r\n    currency: 'HKD'\r\n}, {\r\n    id: 1,\r\n    item: 'Cooking class',\r\n    amount: 1800,\r\n    currency: 'THB'\r\n}];\r\n\r\ntype dataProps = {\r\n    id: number;\r\n    item: string;\r\n    amount: number;\r\n    currency: string;\r\n};\r\n\r\ninterface IDataContainerState  {\r\n    data1: dataProps[];\r\n    data2: dataProps[];\r\n    exchangeRate: number;\r\n    name1: string;\r\n    name2: string;\r\n    isWideView: boolean;\r\n};\r\n\r\nclass DataContainer extends React.Component<{}, IDataContainerState> {\r\n    state = {\r\n        data1: [] as dataProps[],\r\n        data2: [] as dataProps[],\r\n        exchangeRate: 4,\r\n        name1: \"Person 1\",\r\n        name2: \"Person 2\",\r\n        isWideView: false\r\n    }\r\n    componentDidMount() {\r\n        const moneySplit: any = localStorage.getItem('moneySplit');\r\n        // console.log(JSON.parse(moneySplit));\r\n        this.setState(JSON.parse(moneySplit));\r\n    }\r\n\r\n    moveRow1 = (dragIndex: any, hoverIndex: any) => {\r\n        const { data1 } = this.state;\r\n        const dragRow = data1[dragIndex];\r\n    \r\n        this.setState(\r\n          update(this.state, {\r\n            data1: {\r\n              $splice: [[dragIndex, 1], [hoverIndex, 0, dragRow]],\r\n            },\r\n          }),\r\n        );\r\n    }\r\n    moveRow2 = (dragIndex: any, hoverIndex: any) => {\r\n        const { data2 } = this.state;\r\n        const dragRow = data2[dragIndex];\r\n    \r\n        this.setState(\r\n          update(this.state, {\r\n            data2: {\r\n              $splice: [[dragIndex, 1], [hoverIndex, 0, dragRow]],\r\n            },\r\n          }),\r\n        );\r\n    }\r\n    handleAddRow1 = () => {\r\n        const { data1 } = this.state;\r\n        const id = data1.map((row: dataProps) => row.id).reduce((a: any, b: any) => b >= a ? b : a, 0) + 1;\r\n        const row: dataProps[] = [{\r\n            id,\r\n            item: `Item ${id}`,\r\n            amount: 0,\r\n            currency: 'HKD'\r\n        }];\r\n        this.setState({ data1: data1.concat(row) });\r\n    }\r\n    handleAddRow2 = () => {\r\n        const { data2 } = this.state;\r\n        const id = data2.map((row: dataProps) => row.id).reduce((a: any, b: any) => b >= a ? b : a, 0) + 1;\r\n        const row: dataProps[] = [{\r\n            id,\r\n            item: `Item ${id}`,\r\n            amount: 0,\r\n            currency: 'HKD'\r\n        }];\r\n        this.setState({ data2: data2.concat(row) });\r\n    }\r\n    handleDeleteRow1 = (id: number) => {\r\n        const { data1 } = this.state;\r\n        this.setState({ data1: data1.filter((row: any) => row.id !== id) })\r\n    }\r\n    handleDeleteRow2 = (id: number) => {\r\n        const { data2 } = this.state;\r\n        this.setState({ data2: data2.filter((row: any) => row.id !== id) })\r\n    }\r\n\r\n    getCalculationData = () => {\r\n        const { data1, data2, exchangeRate, name1, name2 } = this.state;\r\n        let person1: any = { name: name1, HKD: 0, THB: 0, total: 0, owe: 0 };\r\n        let person2: any = { name: name2, HKD: 0, THB: 0, total: 0, owe: 0 };\r\n        data1.forEach((spending: dataProps) => {\r\n            person1[spending.currency] += spending.amount;\r\n            person1.total += spending.currency === \"HKD\" ? spending.amount : Math.round(spending.amount*100/exchangeRate)/100;\r\n        });\r\n        data2.forEach((spending: dataProps) => {\r\n            person2[spending.currency] += spending.amount;\r\n            person2.total += spending.currency === \"HKD\" ? spending.amount : Math.round(spending.amount*100/exchangeRate)/100;\r\n        });\r\n        let total: number = Math.round((person1.total + person2.total)*100)/100;\r\n        let each: number = Math.round(total*50)/100;\r\n        person1.owe = Math.round((total/2 - person1.total)*100)/100;\r\n        person2.owe = Math.round((total/2 - person2.total)*100)/100;\r\n        // return [person1, person2];\r\n        return {\r\n            tableData: [person1, person2],\r\n            total,\r\n            each\r\n        };\r\n    }\r\n\r\n    handleUpdateData1 = (id: number, dataType: string, value: any) => {\r\n        const { data1 } = this.state;\r\n        const newData = data1.map((item: any) => item.id === id ? { ...item, [dataType]: value } : item);\r\n        this.setState({ data1: newData });\r\n    }\r\n    handleUpdateData2 = (id: number, dataType: string, value: any) => {\r\n        const { data2 } = this.state;\r\n        const newData = data2.map((item: any) => item.id === id ? { ...item, [dataType]: value } : item);\r\n        this.setState({ data2: newData });\r\n    }\r\n    updateExchangeRate = (exchangeRate: any) => {\r\n        this.setState({ exchangeRate });\r\n    }\r\n    handleUpdateName1 = (e: any) => {\r\n        this.setState({ name1: e.target.value });\r\n    }\r\n    handleUpdateName2 = (e: any) => {\r\n        this.setState({ name2: e.target.value });\r\n    }\r\n\r\n    handleSaveData = () => {\r\n        const { data1, data2, name1, name2, exchangeRate } = this.state;\r\n        const moneySplit = { data1, data2, name1, name2, exchangeRate };\r\n        localStorage.setItem(\"moneySplit\", JSON.stringify(moneySplit));\r\n    }\r\n    toggleView = () => {\r\n        this.setState({ isWideView: !this.state.isWideView });\r\n    }\r\n\r\n    render() {\r\n        const { data1, data2, exchangeRate, name1, name2, isWideView } = this.state;\r\n        const calculationData = this.getCalculationData();\r\n        console.log(calculationData);\r\n        return (\r\n            <React.Fragment>\r\n                <Card \r\n                    title={\r\n                        <div>\r\n                            <Button type=\"primary\" onClick={this.handleSaveData}>Save Data</Button>\r\n                            <Button style={{ marginLeft: '12px' }} onClick={this.toggleView}>Toggle View</Button>\r\n                        </div>\r\n                    }\r\n                >\r\n                    <Row gutter={16}>\r\n                        <Col md={24}>\r\n                            Person 1 Name: <Input value={name1} onChange={this.handleUpdateName1} />\r\n                            Person 2 Name: <Input value={name2} onChange={this.handleUpdateName2} />\r\n                        </Col>\r\n                        {/* <Col md={12}>\r\n                            Currency 1: <Input value={name1} onChange={this.handleUpdateName1} />\r\n                            Currency 2: <Input value={name2} onChange={this.handleUpdateName2} />\r\n                        </Col> */}\r\n                    </Row>\r\n                </Card>\r\n            <Row gutter={16}>\r\n                <Col md={isWideView ? 24 : 12} style={{ marginTop: '20px' }}>\r\n                    <DraggableTable \r\n                        title={name1}\r\n                        // columns={columns}\r\n                        data={data1}\r\n                        moveRow={this.moveRow1}\r\n                        handleAddRow={this.handleAddRow1}\r\n                        handleUpdateData={this.handleUpdateData1}\r\n                        handleDeleteRow={this.handleDeleteRow1}\r\n                    />\r\n                </Col>\r\n                <Col md={isWideView ? 24 : 12} style={{ marginTop: '20px' }}>\r\n                    <DraggableTable \r\n                        title={name2}\r\n                        // columns={columns}\r\n                        data={data2}\r\n                        moveRow={this.moveRow2}\r\n                        handleAddRow={this.handleAddRow2}\r\n                        handleUpdateData={this.handleUpdateData2}\r\n                        handleDeleteRow={this.handleDeleteRow2}\r\n                    />\r\n                </Col>\r\n                \r\n                <Col span={24}>\r\n                    <Card title={`Total: ${calculationData.total} HKD (each: ${calculationData.each} HKD)`} style={{ marginTop: '20px' }}>\r\n                        <p>Currency Conversion HKD:Baht</p>\r\n                        <InputNumber \r\n                            value={exchangeRate}\r\n                            placeholder=\"4.00\"  \r\n                            style={{ width: '25%' }}\r\n                            onChange={this.updateExchangeRate}\r\n                        /><br /><br />\r\n                        <Table \r\n                            rowKey=\"name\"\r\n                            bordered={true}\r\n                            size=\"small\"\r\n                            dataSource={calculationData.tableData}\r\n                            columns={columns}\r\n                            pagination={false}\r\n                        />\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n// export default DataContainer;\r\nexport default DragDropContext(HTML5Backend)(DataContainer);","import React from 'react';\nimport DataContainer from './components/DataContainer';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <DataContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n// Reducers\r\n// import { setClipboardText } from './clipboard';\r\n\r\nconst reducers = combineReducers({\r\n\r\n});\r\n\r\nconst store = createStore(reducers, {}, applyMiddleware(thunk));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// Redux\nimport { Provider } from 'react-redux';\nimport store from './reducers';\n\nReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}